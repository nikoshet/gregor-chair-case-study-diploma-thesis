# my global config
global:
  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).
  external_labels:
    monitor:  'GOCAS'

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"
  # - 'prometheus.yml'
# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.

##############
# Prometheus #  
##############
  - job_name: 'prometheus'
    scrape_interval: 5s
    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
      - targets: ['localhost:9090'] 

############
# cAdvisor #  
############
#Container Advisor: analyzes and exposes resource usage and performance data from running containers. cAdvisor exposes Prometheus metrics out of the box
  - job_name: 'cadvisor'
    scrape_interval: 5s
    static_configs:
      - targets: ['192.168.10.123:8080'] # ['cadvisor:8080'] #
#        - cadvisor:8080 
        labels:
          group:  'cAdvisor'

#################
# Node-Exporter #  
#################
#Node-exporter: collects system metrics like cpu/memory/storage usage and then it exports it for Prometheus to scrape. The beauty of this is that it can be run as a docker container while also reporting stats for the host system. It is therefore very easy to instrument any system that can run docker containers
  - job_name: 'node-exporter'
    scrape_interval: 5s
    static_configs:
      - targets: ['192.168.10.123:9100'] # ['node-exporter:9100'] # 
        labels:
          group:  'node-exporter'


